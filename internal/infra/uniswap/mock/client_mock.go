// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/uniswap/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/uniswap/client.go -destination=internal/infra/uniswap/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetPairReserves mocks base method.
func (m *MockClient) GetPairReserves(ctx context.Context, pair common.Address) (*big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairReserves", ctx, pair)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPairReserves indicates an expected call of GetPairReserves.
func (mr *MockClientMockRecorder) GetPairReserves(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairReserves", reflect.TypeOf((*MockClient)(nil).GetPairReserves), ctx, pair)
}

// GetPairTokens mocks base method.
func (m *MockClient) GetPairTokens(ctx context.Context, pair common.Address) (common.Address, common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairTokens", ctx, pair)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPairTokens indicates an expected call of GetPairTokens.
func (mr *MockClientMockRecorder) GetPairTokens(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairTokens", reflect.TypeOf((*MockClient)(nil).GetPairTokens), ctx, pair)
}

// MockEthCaller is a mock of EthCaller interface.
type MockEthCaller struct {
	ctrl     *gomock.Controller
	recorder *MockEthCallerMockRecorder
	isgomock struct{}
}

// MockEthCallerMockRecorder is the mock recorder for MockEthCaller.
type MockEthCallerMockRecorder struct {
	mock *MockEthCaller
}

// NewMockEthCaller creates a new mock instance.
func NewMockEthCaller(ctrl *gomock.Controller) *MockEthCaller {
	mock := &MockEthCaller{ctrl: ctrl}
	mock.recorder = &MockEthCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthCaller) EXPECT() *MockEthCallerMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockEthCaller) CallContract(ctx context.Context, msg ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockEthCallerMockRecorder) CallContract(ctx, msg, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockEthCaller)(nil).CallContract), ctx, msg, blockNumber)
}
